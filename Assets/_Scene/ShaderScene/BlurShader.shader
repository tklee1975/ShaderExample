Shader "ShaderTest/BlurShader"
{
	Properties
	{
		_Blur ("Blur",Range(0,10)) = 5
	}
	SubShader
	{
		Tags { 
		"Queue" = "Transparent"
		"RenderType"="Opaque" 
		}
		LOD 100

		GrabPass {}	// first pass is a grab pass
		Pass
		{
			CGINCLUDE		
			inline float4 BlurUVGrabPass(float b, float4 uv, sampler2D tex)
			{
				float u = 0.00390625f * b;
				float v = u;			
				float4 result = float4 (0,0,0,0);				
				result += 4.0 * tex2Dproj(tex,uv);
				uv.x-=u;result += 2.0 * tex2Dproj(tex,uv);
				uv.y-=v;result += tex2Dproj(tex,uv);
				uv.x+=u;result += 2.0 * tex2Dproj(tex,uv);
				uv.x+=u;result += tex2Dproj(tex,uv);
				uv.y+=v;result += 2.0 * tex2Dproj(tex,uv);
				uv.y+=v;result += tex2Dproj(tex,uv);
				uv.x-=u;result += 2.0 * tex2Dproj(tex,uv);
				uv.x-=u;result += tex2Dproj(tex,uv);
				return result*0.0625;
			}
			ENDCG

			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag

			#include "UnityCG.cginc"

			struct appdata
			{
				float4 vertex : POSITION;
			};

			struct v2f
			{
				float4 vertex : SV_POSITION;
				float4 uvgrab : TEXCOORD2;
			};

			sampler2D _GrabTexture;	// automatically generated by the GrabPass
			float _Blur;
			
			v2f vert (appdata v)
			{
				v2f o;
				o.vertex = UnityObjectToClipPos(v.vertex);
				o.uvgrab = ComputeGrabScreenPos(o.vertex);	// Grab the screen texture

				return o;
			}
			
			fixed4 frag (v2f i) : SV_Target
			{
				// sample the texture

				fixed4 col = BlurUVGrabPass(_Blur, UNITY_PROJ_COORD(i.uvgrab), _GrabTexture); // tex2Dproj(_GrabTexture, UNITY_PROJ_COORD(i.uvgrab));

				return col;
			}
			ENDCG
		}
	}
}

	
